install.packages(c("MASS", "survival"))
install.packages("dplyr")
install.packages(c("dplyr", "tidyverse", "twitteR", "RQDA", "ggplot2", "tidyr"))
install.packages("igraph")
ggraph(mygraph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(size=n, color=as.factor(grp), fill=grp), alpha=0.5) +
scale_size_continuous(range=c(0.5,8)) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme_void() +
theme(
legend.position="none",
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2))
library(ggraph)
require(ggraph)
library(ggplot2)
ggraph(mygraph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(size=n, color=as.factor(grp), fill=grp), alpha=0.5) +
scale_size_continuous(range=c(0.5,8)) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme_void() +
theme(
legend.position="none",
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2))
install.package(ggraph)
install.packages(ggraph)
install.packages(igraph)
install.packages(ggraph)
install.packages(c("ggraph", "igraph"))
library(ggraph)
library(igraph)
ggraph(mygraph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(size=n, color=as.factor(grp), fill=grp), alpha=0.5) +
scale_size_continuous(range=c(0.5,8)) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme_void() +
theme(
legend.position="none",
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2))
connect <- dataUU %>%
gather(key="to", value="value", -1) %>%
mutate(to = gsub("\\.", " ",to)) %>%
na.omit()
install.packages("usethis")
usethis::use_course("https://github.com/r-journalism/learn-chapter-1/archive/master.zip")
install.packages("Rgtk2")
install.packages("RGtk2")
install.packages("cairoDevice")
install.packages("RQDA")
library(xlsx)
install.packages("rjson")
library(rjson)
filenames <- list.files("Users/javicanton/IG_test", pattern="*.json", full.names=TRUE) # this should give you a character vector, with each file name represented by an entry
filenames <- list.files("/Users/javicanton/IG_test", pattern="*.json", full.names=TRUE) # this should give you a character vector, with each file name represented by an entry
myJSON <- lapply(filenames, function(x) fromJSON(file=x)) # a list in which each element is one of your original JSON files
as.data.frame(myJSON)
myJSON <- as.data.frame(lapply(filenames, function(x) fromJSON(file=x))) # a list in which each element is one of your original JSON files
View(myJSON)
library(parallel)
cl <- makeCluster(detectCores() - 1)
json_files<-list.files(path ="/Users/javicanton/IG_test",pattern="*.json",full.names = TRUE)
json_list<-parLapply(cl,json_files,function(x) rjson::fromJSON(file=x,method = "R"))
stopCluster(cl)
library(purrr)
library(tidyverse)
library(jsonlite)
path <- "./Users/javicanton/IG_test"
files <- dir(path, pattern = "*.json")
data <- files %>%
map_df(~fromJSON(file.path(path, .), flatten = TRUE))
path <- "./Users/javicanton/IG_test"
path <- "/Users/javicanton/IG_test"
files <- dir(path, pattern = "*.json")
data <- files %>%
map_df(~fromJSON(file.path(path, .), flatten = TRUE))
path <- "/Users/javicanton/IG_test"
files <- dir(path, pattern = "*.json")
data <- files %>%
map_df(~fromJSON(file.path(path, .), flatten = TRUE))
library(parallel)
cl <- makeCluster(detectCores() - 1)
json_files<-list.files(path ="/Users/javicanton/IG_test",pattern="*.json",full.names = TRUE)
json_list<-parLapply(cl,json_files,function(x) rjson::fromJSON(file=x,method = "R"))
tbl(json_list)
data.frame(json_list)
js <- as.data.frame(json_list)
temp <- list.files(path, pattern="*.json", full.names=TRUE)
ig <- purrr::map_df(temp, function(x) {
purrr::map(jsonlite::fromJSON(x), function(y) ifelse(is.null(y), NA, y))
})
View(ig)
purrr::map(jsonlite::fromJSON(x)))
purrr::map(jsonlite::fromJSON(x))
purrr::map(jsonlite::fromJSON(x)))
purrr::map(jsonlite::fromJSON(x))))
library(rjsonio)
install.packages("rjsonio")
install.packages("RJOSONIO")
install.packages("RJSONIO")
library(RJSONIO)
json_file <- fromJSON(/Users/javicanton/IG_test")
json_file <- fromJSON("Users/javicanton/IG_test")
json_file <- fromJSON("/Users/javicanton/IG_test")
json_file <- fromJSON("/Users/javicanton/IG_test", pattern="*.json", full.names=TRUE)
json_file <- fromJSON("/Users/javicanton/IG_test", pattern="*.json")
json_file <- lapply(json_list, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
df<-as.data.frame(do.call("cbind", json_file))
View(df)
vars <- setdiff(names(json_file), c("photos", "features"))
vars <- setdiff(names(json_file), c("photos", "features"))
data <- map_at(data, vars, unlist) %>% tibble::as_tibble(.)
library(dplyr)
data <- map_at(data, vars, unlist) %>% tibble::as_tibble(.)
packages <- c("jsonlite", "dplyr", "purrr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
vars <- setdiff(names(json_file), c("photos", "features"))
data <- map_at(data, vars, unlist) %>% tibble::as_tibble(.)
data <- fromJSON("../input/train.json")
data <- json_file
vars <- setdiff(names(json_file), c("photos", "features"))
data <- map_at(data, vars, unlist) %>% tibble::as_tibble(.)
library(rjson)
library(parallel)
cl <- makeCluster(detectCores() - 1)
json_files<-list.files(path ="/Users/javicanton/IG_test",pattern="*.json",full.names = TRUE)
json_list<-parLapply(cl,json_files,function(x) rjson::fromJSON(file=x,method = "R"))
stopCluster(cl)
js <- as.data.frame(json_list)
rm(js)
library(purrr)
library(tidyverse)
library(jsonlite)
path <- "/Users/javicanton/IG_test"
files <- dir(path, pattern = "*.json")
data <- files %>%
map_df(~fromJSON(file.path(path, .), flatten = TRUE))
library(purrr)
library(tidyverse)
library(jsonlite)
path <- "/Users/javicanton/IG_test"
files <- dir(path, pattern = "*.json")
data <- files %>%
map_df(~fromJSON(file.path(path, .), flatten = TRUE))
View(data)
library(RJSONIO)
json_file <- fromJSON("/Users/javicanton/IG_test", pattern="*.json")
library(purrr)
library(tidyverse)
library(jsonlite)
path <- "/Users/javicanton/IG_test"
files <- dir(path, pattern = "*.json")
json_file <- lapply(json_list, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
library(parallel)
cl <- makeCluster(detectCores() - 1)
json_files<-list.files(path ="/Users/javicanton/IG_test",pattern="*.json",full.names = TRUE)
json_list<-parLapply(cl,json_files,function(x) rjson::fromJSON(file=x,method = "R"))
stopCluster(cl)
json_file <- fromJSON("/Users/javicanton/IG_test", pattern="*.json")
library(RJSONIO)
json_file <- fromJSON("/Users/javicanton/IG_test", pattern="*.json")
json_file <- lapply(json_list, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
ig < -as.data.frame(do.call("cbind", json_file))
filenames <- list.files("/Users/javicanton/IG_test", pattern="*.json", full.names=TRUE) # this should give you a character vector, with each file name represented by an entry
myJSON <- as.data.frame(lapply(filenames, function(x) fromJSON(file=x))) # a list in which each element is one of your original JSON files
library(rjson)
myJSON <- as.data.frame(lapply(filenames, function(x) fromJSON(file=x))) # a list in which each element is one of your original JSON files
library(parallel)
cl <- makeCluster(detectCores() - 1)
json_files<-list.files(path ="/Users/javicanton/IG_test",pattern="*.json",full.names = TRUE)
json_list<-parLapply(cl,json_files,function(x) rjson::fromJSON(file=x,method = "R"))
stopCluster(cl)
path <- "/Users/javicanton/IG_test"
files <- dir(path, pattern = "*.json")
data <- files %>%
map_df(~fromJSON(file.path(path, .), flatten = TRUE))
library(RJSONIO)
json_file <- fromJSON("/Users/javicanton/IG_test", pattern="*.json")
library(RJSONIO)
json_file <- lapply(json_list, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
ig < -as.data.frame(do.call("cbind", json_file))
ig < as.data.frame(do.call("cbind", json_file))
ig <- as.data.frame(do.call("cbind", json_file))
View(ig)
table <- fromJSON(json)
table <- fromJSON("/Users/javicanton/IG_test", pattern="*.json")
table <- fromJSON(json_file)
table <- fromJSON(json_list)
json_list <- grep("^/\\* [0-9]* \\*/", raw, value = TRUE, invert = TRUE)
doc1<-fromJSON("/Users/javicanton/IG_test", pattern="*.json", method="C")
data1 <- do.call(rbind, lapply(json_list, function(x) data.frame(x$properties)))
data1 <- do.call(rbind, lapply(json_file$features, function(x) data.frame(x$properties)))
View(data1)
View(data)
data1 <- do.call(rbind, lapply(json_file$features, function(x) data.frame(x$properties)))
library(jsonlite)
yelp <- fromJSON("yelp_academic_dataset_business.json")
yelp <- fromJSON("yelp_academic_dataset_business.json")
library(rjson)
filenames <- list.files("/Users/javicanton/IG_test", pattern="*.json", full.names=TRUE) # this should give you a character vector, with each file name represented by an entry
myJSON <- as.data.frame(lapply(filenames, function(x) fromJSON(file=x))) # a list in which each element is one of your original JSON files
json_files<-list.files(path ="/Users/javicanton/IG_test",pattern="*.json",full.names = TRUE)
json_list<-parLapply(cl,json_files,function(x) rjson::fromJSON(file=x,method = "R"))
json_file <- fromJSON("/Users/javicanton/IG_test", pattern="*.json")
json_file <- lapply(json_list, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
ig <- as.data.frame(do.call("cbind", json_file))
filenames <- list.files("/Users/javicanton/IG_test", pattern="*.json", full.names=TRUE) # this should give you a character vector, with each file name represented by an entry
myJSON <- as.data.frame(lapply(filenames, function(x) fromJSON(file=x))) # a list in which each element is one of your original JSON files
files <- dir(path, pattern = "*.json")
data <- files %>%
map_df(~fromJSON(file.path(path, .), flatten = TRUE))
table <- fromJSON(json_list)
library(RJSONIO)
json_file <- fromJSON("/Users/javicanton/IG_test", pattern="*.json")
json_file <- lapply(json_list, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
ig <- as.data.frame(do.call("cbind", json_file))
json_file <- fromJSON("/Users/javicanton/IG_test", pattern="*.json")
library(parallel)
cl <- makeCluster(detectCores() - 1)
json_files<-list.files(path ="/Users/javicanton/IG_test",pattern="*.json",full.names = TRUE)
library(parallel)
cl <- makeCluster(detectCores() - 1)
json_files<-list.files(path ="/Users/javicanton/IG_test",pattern="*.json",full.names = TRUE)
json_list<-parLapply(cl,json_files,function(x) rjson::fromJSON(file=x,method = "R"))
stopCluster(cl)
json_file <- fromJSON("/Users/javicanton/IG_test", pattern="*.json")
json <- lapply(json_list, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
ig <- as.data.frame(do.call("cbind", json_file))
library(Rserve)
Rserve(args = "--no-save")
library(syuzhet)
library(syuzhet)
install.packages("syuzhet")
install.packages("syuzhet")
library(syuzhet)
Rserve(args = "--no-save")
library("tm")
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
text <- readLines("/Users/javicanton/Downloads/text.txt", encoding="utf-8")
docs <- Corpus(VectorSource(text))
inspect(docs)
text <- readLines("/Users/javicanton/Downloads/text.txt")
docs <- Corpus(VectorSource(text))
inspect(docs)
toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
docs <- tm_map(docs, toSpace, "/")
docs <- tm_map(docs, toSpace, "@")
docs <- tm_map(docs, toSpace, "\\|")
# Convert the text to lower case
docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
docs <- tm_map(docs, removeNumbers)
# Remove english common stopwords
docs <- tm_map(docs, removeWords, stopwords("english"))
# Remove your own stop word
# specify your stopwords as a character vector
docs <- tm_map(docs, removeWords, c("que", "por", "con", "los"))
# Remove punctuations
docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
docs <- tm_map(docs, stripWhitespace)
# Text stemming
docs <- tm_map(docs, stemDocument)
inspect(docs)
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 10)
set.seed(1234)
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
inspect(docs)
docs <- tm_map(docs, removeWords, stopwords("spanish"))
# Remove your own stop word
# specify your stopwords as a character vector
docs <- tm_map(docs, removeWords, c("que", "por", "con", "los"))
# Remove punctuations
docs <- tm_map(docs, removePunctuation)
# Text stemming
docs <- tm_map(docs, stemDocument)
# Text stemming
docs <- tm_map(docs, stemDocument)
inspect(docs)
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
set.seed(1234)
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
library("readr")
text <- read_lines("/Users/javicanton/Downloads/text.txt")
docs <- Corpus(VectorSource(text))
inspect(docs)
text <- read_file("/Users/javicanton/Downloads/text.txt")
docs <- Corpus(VectorSource(text))
inspect(docs)
locale(encoding = "UTF-8")
text <- read_file("/Users/javicanton/Downloads/text.txt")
docs <- Corpus(VectorSource(text))
inspect(docs)
head(text)
text <- read_lines_raw("/Users/javicanton/Downloads/text.txt")
docs <- Corpus(VectorSource(text))
inspect(docs)
text <- read_lines("/Users/javicanton/Downloads/text.txt", text)
locale <- locale(encoding = "UTF-8")
text <- read_lines("/Users/javicanton/Downloads/text.txt", locale)
docs <- Corpus(VectorSource(text))
inspect(docs)
suma=10
i=4
while(i<=4){
suma=suma*2
i=i+1
}
suma=10
i=4
while(i<=4){
suma=suma*2
i=i+1
}
print
suma
12%/%7
p <- c("casa", "coche","árbol")
s <- c(TRUE, FALSE, FALSE)
t <- c(1,2,3,4,5)
lista <- list(p,s,t)
lista[[3]][2]
2 + 2 ##suma
curso <- factor(c("1","2","2","1","3","1","3"), levels = c("1","2","3"))
## EJERCICIO 2
# Sumar elementos en posiciones pares
vector <- c(2,5,3,6,4,7,4,6,3,6,3,6,3,9,8,6)
posicion<-0
SumaPosPar<-0
for  (i in vector)
{(posicion<-posicion+1)
if (posicion%%2==0)
(SumaPosPar<- SumaPosPar+ i)}
print(SumaPosPar)
# Pero usando bucles sería así
i = 0
suma = 0
# Pero usando bucles sería así
i = 0
suma = 0
for  (i in x)
{( i <- i + 1)
if (i%%2==0)
(suma <- suma + i)}
print(suma)
suma = 0
for  (i in x){
(i <- i + 1)
if (i%%2==0)
(suma <- suma + i)}
## EJERCICIO 2
# Sumar elementos en posiciones pares
x <- c(2,5,3,6,4,7,4,6,3,6,3,6,3,9,8,6)
# Pero usando bucles sería así
i = 0
suma = 0
for  (i in x){
(i <- i + 1)
if (i%%2==0)
(suma <- suma + i)}
print(suma)
# Pero usando bucles sería así
i <- 0
# Pero usando bucles sería así
i <- 0
suma <- 0
for  (i in x){
(i <- i + 1)
if (i%%2==0)
(suma <- suma + i)}
print(suma)
posicion<-0
SumaPosPar<-0
for  (i in vector){
(posicion<-posicion+1)
if (posicion%%2==0)
(SumaPosPar<- SumaPosPar+ i)}
print(SumaPosPar)
posicion<-0
SumaPosPar<-0
for  (i in x){
(posicion<-posicion+1)
if (posicion%%2==0)
(SumaPosPar<- SumaPosPar+ i)}
print(SumaPosPar)
pos <- 0
suma <-0
pos <- 0
suma <-0
for  (i in x){
(pos <- pos +1)
if (pos%%2==0)
(suma <- suma + i)}
print(suma)
sum(x[seq(2,length(x),2)])
## EJERCICIO 4
# Cálculo de la varianza de un vector mediante la fórmula de Koning
varianza <- function(n){
v <- 0
for (i in 1:n){
v <- i*2 - mean(i)*2
}
print(v)
}
v <- c(2,4,1,3,6,7)
varianza(v)
## EJERCICIO 4
# Cálculo de la varianza de un vector mediante la fórmula de Koning
varianza <- function(n){
v <- 0
for (i in 1:n){
v <- i*2 / mean(i)*2
}
print(v)
}
varianza(v)
?var
var()
var(x)
var(y)
?var()
install.packages("euRobasket")
install.packages("ballr")
install.packages("basket")
install.packages(c("aplpack", "backports", "BH", "blob", "boot", "broom", "cairoDevice", "callr", "car", "carData", "caTools", "cli", "clipr", "curl", "data.table", "DBI", "devtools", "digest", "doParallel", "dplyr", "e1071", "effects", "ellipsis", "enc", "farver", "foreach", "foreign", "ggforce", "ggplot2", "ggraph", "git2r", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "ISOcodes", "iterators", "KernSmooth", "knitr", "later", "learnr", "maptools", "markdown", "MASS", "Matrix", "mgcv", "mime", "modelr", "multcomp", "nlme", "openssl", "openxlsx", "pillar", "pkgbuild", "pkgconfig", "plyr", "processx", "promises", "psych", "purrr", "R6", "Rcmdr", "Rcpp", "RcppEigen", "rematch2", "remotes", "rgl", "RJSONIO", "rlang", "rmarkdown", "RSQLite", "rvest", "scales", "selectr", "shiny", "slam", "sp", "SparseM", "stopwords", "stringdist", "styler", "survival", "sys", "testthat", "tidyr", "tidytext", "tidyverse", "tinytex", "tm", "units", "usethis", "vctrs", "webshot", "whisker", "xfun", "xml2", "zip"))
library(tidyverse)
library(xlsx)
library(xlsx)
library(openxlsx)
library(openxlsx)
setwd("/Downloads")
setwd("~/Downloads")
df <- read.xlsx("Data.xlsx")
df <- as.data.frame(read.xlsx("Data.xlsx"))
View(df)
df.l <- gather(df, key = "Year", value = "Value" , 2004, 2005, 2006, 2007, 2008, 2013, 2017) )
df.l <- gather(df,
key = "Year",
value = "Value",
2004, 2005, 2006, 2007, 2008, 2013, 2017)
df.l <- gather(df,
key = "Year",
value = "Value",
"2004", "2005", "2006", "2007", "2008", "2013", "2017")
View(df.l)
write.xlsx("Data_tableau.xlsx")
write.xlsx(df.l, "Data_tableau.xlsx")
setwd("~/Documents/GitHub/Make-Over-Monday-2020-Week-1")
df <- as.data.frame(read.xlsx("Data.xlsx"))
df.l <- gather(df,
key = "Year",
value = "Value",
"2004", "2005", "2006", "2007", "2008", "2013", "2017")
write.xlsx(df.l, "Data_tableau.xlsx")
write.xlsx(df.l, "Data_tidy.xlsx")
